package com.cyb.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cyb.retrofitlesson.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property CustomerKeyID = new Property(1, int.class, "CustomerKeyID", false, "CUSTOMER_KEY_ID");
        public final static Property DepartmentID = new Property(2, int.class, "DepartmentID", false, "DEPARTMENT_ID");
        public final static Property UserID = new Property(3, String.class, "UserID", false, "USER_ID");
        public final static Property CompanyNo = new Property(4, String.class, "CompanyNo", false, "COMPANY_NO");
        public final static Property DepartmentName = new Property(5, String.class, "departmentName", false, "DEPARTMENT_NAME");
        public final static Property IsUsing = new Property(6, boolean.class, "IsUsing", false, "IS_USING");
        public final static Property Email = new Property(7, String.class, "Email", false, "EMAIL");
        public final static Property Phone = new Property(8, String.class, "Phone", false, "PHONE");
        public final static Property Sex = new Property(9, String.class, "Sex", false, "SEX");
        public final static Property Birthday = new Property(10, String.class, "Birthday", false, "BIRTHDAY");
        public final static Property Country = new Property(11, String.class, "Country", false, "COUNTRY");
        public final static Property State = new Property(12, String.class, "State", false, "STATE");
        public final static Property Address = new Property(13, String.class, "Address", false, "ADDRESS");
        public final static Property ZIP = new Property(14, String.class, "ZIP", false, "ZIP");
        public final static Property ReMark = new Property(15, String.class, "ReMark", false, "RE_MARK");
        public final static Property APN = new Property(16, String.class, "APN", false, "APN");
        public final static Property IsEmailVerify = new Property(17, boolean.class, "IsEmailVerify", false, "IS_EMAIL_VERIFY");
        public final static Property GeneratorLimit = new Property(18, int.class, "generatorLimit", false, "GENERATOR_LIMIT");
        public final static Property HeadImgUrl = new Property(19, String.class, "HeadImgUrl", false, "HEAD_IMG_URL");
        public final static Property Roles = new Property(20, String.class, "Roles", false, "ROLES");
        public final static Property IsParentCustomer = new Property(21, boolean.class, "IsParentCustomer", false, "IS_PARENT_CUSTOMER");
        public final static Property DisplayName = new Property(22, String.class, "DisplayName", false, "DISPLAY_NAME");
        public final static Property UserName = new Property(23, String.class, "UserName", false, "USER_NAME");
        public final static Property IsManager = new Property(24, boolean.class, "IsManager", false, "IS_MANAGER");
        public final static Property CompanyName = new Property(25, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property IsAdminRole = new Property(26, boolean.class, "IsAdminRole", false, "IS_ADMIN_ROLE");
        public final static Property UnReadDiaryCount = new Property(27, int.class, "UnReadDiaryCount", false, "UN_READ_DIARY_COUNT");
        public final static Property UnReadTaskCount = new Property(28, int.class, "UnReadTaskCount", false, "UN_READ_TASK_COUNT");
        public final static Property UnReadSignCount = new Property(29, int.class, "UnReadSignCount", false, "UN_READ_SIGN_COUNT");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"CUSTOMER_KEY_ID\" INTEGER NOT NULL ," + // 1: CustomerKeyID
                "\"DEPARTMENT_ID\" INTEGER NOT NULL ," + // 2: DepartmentID
                "\"USER_ID\" TEXT," + // 3: UserID
                "\"COMPANY_NO\" TEXT," + // 4: CompanyNo
                "\"DEPARTMENT_NAME\" TEXT," + // 5: departmentName
                "\"IS_USING\" INTEGER NOT NULL ," + // 6: IsUsing
                "\"EMAIL\" TEXT," + // 7: Email
                "\"PHONE\" TEXT," + // 8: Phone
                "\"SEX\" TEXT," + // 9: Sex
                "\"BIRTHDAY\" TEXT," + // 10: Birthday
                "\"COUNTRY\" TEXT," + // 11: Country
                "\"STATE\" TEXT," + // 12: State
                "\"ADDRESS\" TEXT," + // 13: Address
                "\"ZIP\" TEXT," + // 14: ZIP
                "\"RE_MARK\" TEXT," + // 15: ReMark
                "\"APN\" TEXT," + // 16: APN
                "\"IS_EMAIL_VERIFY\" INTEGER NOT NULL ," + // 17: IsEmailVerify
                "\"GENERATOR_LIMIT\" INTEGER NOT NULL ," + // 18: generatorLimit
                "\"HEAD_IMG_URL\" TEXT," + // 19: HeadImgUrl
                "\"ROLES\" TEXT," + // 20: Roles
                "\"IS_PARENT_CUSTOMER\" INTEGER NOT NULL ," + // 21: IsParentCustomer
                "\"DISPLAY_NAME\" TEXT," + // 22: DisplayName
                "\"USER_NAME\" TEXT," + // 23: UserName
                "\"IS_MANAGER\" INTEGER NOT NULL ," + // 24: IsManager
                "\"COMPANY_NAME\" TEXT," + // 25: companyName
                "\"IS_ADMIN_ROLE\" INTEGER NOT NULL ," + // 26: IsAdminRole
                "\"UN_READ_DIARY_COUNT\" INTEGER NOT NULL ," + // 27: UnReadDiaryCount
                "\"UN_READ_TASK_COUNT\" INTEGER NOT NULL ," + // 28: UnReadTaskCount
                "\"UN_READ_SIGN_COUNT\" INTEGER NOT NULL );"); // 29: UnReadSignCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getCustomerKeyID());
        stmt.bindLong(3, entity.getDepartmentID());
 
        String UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindString(4, UserID);
        }
 
        String CompanyNo = entity.getCompanyNo();
        if (CompanyNo != null) {
            stmt.bindString(5, CompanyNo);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(6, departmentName);
        }
        stmt.bindLong(7, entity.getIsUsing() ? 1L: 0L);
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(8, Email);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(9, Phone);
        }
 
        String Sex = entity.getSex();
        if (Sex != null) {
            stmt.bindString(10, Sex);
        }
 
        String Birthday = entity.getBirthday();
        if (Birthday != null) {
            stmt.bindString(11, Birthday);
        }
 
        String Country = entity.getCountry();
        if (Country != null) {
            stmt.bindString(12, Country);
        }
 
        String State = entity.getState();
        if (State != null) {
            stmt.bindString(13, State);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(14, Address);
        }
 
        String ZIP = entity.getZIP();
        if (ZIP != null) {
            stmt.bindString(15, ZIP);
        }
 
        String ReMark = entity.getReMark();
        if (ReMark != null) {
            stmt.bindString(16, ReMark);
        }
 
        String APN = entity.getAPN();
        if (APN != null) {
            stmt.bindString(17, APN);
        }
        stmt.bindLong(18, entity.getIsEmailVerify() ? 1L: 0L);
        stmt.bindLong(19, entity.getGeneratorLimit());
 
        String HeadImgUrl = entity.getHeadImgUrl();
        if (HeadImgUrl != null) {
            stmt.bindString(20, HeadImgUrl);
        }
 
        String Roles = entity.getRoles();
        if (Roles != null) {
            stmt.bindString(21, Roles);
        }
        stmt.bindLong(22, entity.getIsParentCustomer() ? 1L: 0L);
 
        String DisplayName = entity.getDisplayName();
        if (DisplayName != null) {
            stmt.bindString(23, DisplayName);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(24, UserName);
        }
        stmt.bindLong(25, entity.getIsManager() ? 1L: 0L);
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(26, companyName);
        }
        stmt.bindLong(27, entity.getIsAdminRole() ? 1L: 0L);
        stmt.bindLong(28, entity.getUnReadDiaryCount());
        stmt.bindLong(29, entity.getUnReadTaskCount());
        stmt.bindLong(30, entity.getUnReadSignCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getCustomerKeyID());
        stmt.bindLong(3, entity.getDepartmentID());
 
        String UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindString(4, UserID);
        }
 
        String CompanyNo = entity.getCompanyNo();
        if (CompanyNo != null) {
            stmt.bindString(5, CompanyNo);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(6, departmentName);
        }
        stmt.bindLong(7, entity.getIsUsing() ? 1L: 0L);
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(8, Email);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(9, Phone);
        }
 
        String Sex = entity.getSex();
        if (Sex != null) {
            stmt.bindString(10, Sex);
        }
 
        String Birthday = entity.getBirthday();
        if (Birthday != null) {
            stmt.bindString(11, Birthday);
        }
 
        String Country = entity.getCountry();
        if (Country != null) {
            stmt.bindString(12, Country);
        }
 
        String State = entity.getState();
        if (State != null) {
            stmt.bindString(13, State);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(14, Address);
        }
 
        String ZIP = entity.getZIP();
        if (ZIP != null) {
            stmt.bindString(15, ZIP);
        }
 
        String ReMark = entity.getReMark();
        if (ReMark != null) {
            stmt.bindString(16, ReMark);
        }
 
        String APN = entity.getAPN();
        if (APN != null) {
            stmt.bindString(17, APN);
        }
        stmt.bindLong(18, entity.getIsEmailVerify() ? 1L: 0L);
        stmt.bindLong(19, entity.getGeneratorLimit());
 
        String HeadImgUrl = entity.getHeadImgUrl();
        if (HeadImgUrl != null) {
            stmt.bindString(20, HeadImgUrl);
        }
 
        String Roles = entity.getRoles();
        if (Roles != null) {
            stmt.bindString(21, Roles);
        }
        stmt.bindLong(22, entity.getIsParentCustomer() ? 1L: 0L);
 
        String DisplayName = entity.getDisplayName();
        if (DisplayName != null) {
            stmt.bindString(23, DisplayName);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(24, UserName);
        }
        stmt.bindLong(25, entity.getIsManager() ? 1L: 0L);
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(26, companyName);
        }
        stmt.bindLong(27, entity.getIsAdminRole() ? 1L: 0L);
        stmt.bindLong(28, entity.getUnReadDiaryCount());
        stmt.bindLong(29, entity.getUnReadTaskCount());
        stmt.bindLong(30, entity.getUnReadSignCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // CustomerKeyID
            cursor.getInt(offset + 2), // DepartmentID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // UserID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CompanyNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // departmentName
            cursor.getShort(offset + 6) != 0, // IsUsing
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Email
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Phone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Sex
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Birthday
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Country
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // State
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // Address
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ZIP
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // ReMark
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // APN
            cursor.getShort(offset + 17) != 0, // IsEmailVerify
            cursor.getInt(offset + 18), // generatorLimit
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // HeadImgUrl
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // Roles
            cursor.getShort(offset + 21) != 0, // IsParentCustomer
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // DisplayName
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // UserName
            cursor.getShort(offset + 24) != 0, // IsManager
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // companyName
            cursor.getShort(offset + 26) != 0, // IsAdminRole
            cursor.getInt(offset + 27), // UnReadDiaryCount
            cursor.getInt(offset + 28), // UnReadTaskCount
            cursor.getInt(offset + 29) // UnReadSignCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCustomerKeyID(cursor.getInt(offset + 1));
        entity.setDepartmentID(cursor.getInt(offset + 2));
        entity.setUserID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompanyNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDepartmentName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsUsing(cursor.getShort(offset + 6) != 0);
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSex(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBirthday(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCountry(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setState(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAddress(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setZIP(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setReMark(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAPN(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsEmailVerify(cursor.getShort(offset + 17) != 0);
        entity.setGeneratorLimit(cursor.getInt(offset + 18));
        entity.setHeadImgUrl(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setRoles(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setIsParentCustomer(cursor.getShort(offset + 21) != 0);
        entity.setDisplayName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setUserName(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setIsManager(cursor.getShort(offset + 24) != 0);
        entity.setCompanyName(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setIsAdminRole(cursor.getShort(offset + 26) != 0);
        entity.setUnReadDiaryCount(cursor.getInt(offset + 27));
        entity.setUnReadTaskCount(cursor.getInt(offset + 28));
        entity.setUnReadSignCount(cursor.getInt(offset + 29));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
